name: ci
on: [push, pull_request]
jobs:
  lint:
    name: ${{ matrix.component }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        component: [clippy]
        include:
          - component: rustfmt
            cargo_cmd: fmt -- --check
            os: ubuntu-latest
          - component: clippy
            cargo_cmd: clippy --locked --all-targets -- -D warnings -A unknown-lints -A clippy::type_complexity -A clippy::new-without-default
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          components: ${{ matrix.component }}
          toolchain: 1.60.0

      - name: clippy version
        run: cargo clippy --version
        if: ${{ matrix.component == 'clippy' }}

      - name: Check
        run: cargo ${{ matrix.cargo_cmd }}

  test:
    name: test ${{ matrix.os }} rust ${{ matrix.rustc || 'stable' }} ${{ matrix.extra_desc }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure || false }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            rustc: 1.60.0 # Oldest supported version, keep in sync with README.md
          - os: ubuntu-18.04
            rustc: 1.60.0
            extra_desc: dist-server
            extra_args: --no-default-features --features=dist-tests test_dist_ -- --test-threads 1
          - os: ubuntu-20.04
            rustc: stable
          - os: ubuntu-20.04
            rustc: beta
          - os: ubuntu-20.04
            rustc: nightly
            allow_failure: true
            extra_args: --features=unstable
          - os: ubuntu-22.04
          - os: macOS-11
          - os: windows-2019
            rustc: 1.60.0 # Oldest supported version, keep in sync with README.md
          - os: windows-2019
            rustc: nightly
            allow_failure: true
            extra_args: --features=unstable
          - os: windows-2019
            rustc: beta
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          toolchain: ${{ matrix.rustc }}

      - name: Install gcc & clang for tests
        run: sudo apt-get install -y clang gcc
        if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' }}

      - name: Build tests
        run: cargo test --no-run --locked --all-targets --verbose ${{ matrix.extra_args }}

      - name: Run tests
        run: cargo test --locked --all-targets --verbose ${{ matrix.extra_args }}

  build:
    name: build ${{ matrix.binary || 'sccache' }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-20.04
            binary: sccache-dist
            extra_args: --no-default-features --features="dist-server"
            target: x86_64-unknown-linux-musl
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
          - os: macOS-11
            target: x86_64-apple-darwin
            macosx_deployment_target: 10.13
            developer_dir: /Applications/Xcode_11.7.app
            sdkroot: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
          - os: macOS-11
            target: aarch64-apple-darwin
            macosx_deployment_target: 11.0
            developer_dir: /Applications/Xcode_13.2.1.app
            sdkroot: /Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk
          - os: windows-2019
            target: x86_64-pc-windows-msvc
            rustflags: -Ctarget-feature=+crt-static
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          toolchain: ${{ matrix.target == 'aarch64-apple-darwin' && 'beta' || 'stable' }}
          target: ${{ matrix.target }}

      - name: Install musl-tools
        run: sudo apt-get install musl-tools
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}

      - name: Install musl-tools
        run: |
          set -x
          echo deb [arch=arm64] http://azure.ports.ubuntu.com/ubuntu-ports/ $(lsb_release -c -s) main restricted universe multiverse | sudo tee /etc/apt/sources.list.d/99ports.list > /dev/null
          sudo dpkg --add-architecture arm64
          sudo apt-get update || true
          sudo apt-get install musl-dev:arm64 binutils-multiarch gcc-10-aarch64-linux-gnu libc6-dev-arm64-cross
          apt-get download musl-tools:arm64
          sudo dpkg-deb -x musl-tools_*_arm64.deb /
          sed 2iREALGCC=aarch64-linux-gnu-gcc-10 /usr/bin/musl-gcc | sudo tee /usr/bin/aarch64-linux-musl-gcc > /dev/null
          sudo chmod +x /usr/bin/aarch64-linux-musl-gcc
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}

      - name: Build
        run: cargo build --locked --release --verbose --bin ${{ matrix.binary || 'sccache' }} --target ${{ matrix.target }} --features=openssl/vendored ${{ matrix.extra_args }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-gcc
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macosx_deployment_target }}
          DEVELOPER_DIR: ${{ matrix.developer_dir }}
          SDKROOT: ${{ matrix.sdkroot }}
          RUSTFLAGS: ${{ matrix.rustflags }}

      # Workaround for the lack of substring() function in github actions expressions.
      - name: Id
        id: id
        shell: bash
        run: echo "id=${ID#refs/tags/}" >> $GITHUB_OUTPUT
        env:
          ID: ${{ startsWith(github.ref, 'refs/tags/') && github.ref || github.sha }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary || 'sccache' }}-${{ steps.id.outputs.id }}-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary || 'sccache' }}${{ endsWith(matrix.target, '-msvc') && '.exe' || '' }}
          if-no-files-found: error

  coverage:
    name: coverage ${{ matrix.os }} rust ${{ matrix.rustc || 'stable' }} ${{ matrix.extra_desc }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure || false }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            rustc: nightly
            allow_failure: true
            extra_args: --features=unstable
          - os: macOS-11
            rustc: nightly
# Disable on Windows for now as it fails with:
# found invalid metadata files for crate `vte_generate_state_changes`
#          - os: windows-2019
#            rustc: nightly
    env:
      RUST_BACKTRACE: 1
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install rust
        uses: ./.github/actions/rust-toolchain
        with:
          toolchain: ${{ matrix.rustc }}

      - name: Install gcc & clang for tests
        run: sudo apt-get install -y clang gcc
        if: ${{ matrix.os == 'ubuntu-20.04' }}

      - name: "`grcov` ~ install"
        run: cargo install grcov

      - name: Execute tests
        run: cargo test --no-fail-fast --locked --all-targets --verbose ${{ matrix.extra_args }}
        env:
          CARGO_INCREMENTAL: '0'
          RUSTC_WRAPPER: ''
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off'

      - name: Generate coverage data (via `grcov`)
        id: coverage
        shell: bash
        run: |
          ## Generate coverage data
          COVERAGE_REPORT_DIR="target/debug"
          COVERAGE_REPORT_FILE="${COVERAGE_REPORT_DIR}/lcov.info"
          # GRCOV_IGNORE_OPTION='--ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*"' ## `grcov` ignores these params when passed as an environment variable (why?)
          # GRCOV_EXCLUDE_OPTION='--excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()"' ## `grcov` ignores these params when passed as an environment variable (why?)
          mkdir -p "${COVERAGE_REPORT_DIR}"
          # display coverage files
          grcov . --output-type files --ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*" --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()" | sort --unique
          # generate coverage report
          grcov . --output-type lcov --output-path "${COVERAGE_REPORT_FILE}" --branch --ignore build.rs --ignore "/*" --ignore "[a-zA-Z]:/*" --excl-br-line "^\s*((debug_)?assert(_eq|_ne)?!|#\[derive\()"
          echo "report=${COVERAGE_REPORT_FILE}" >> $GITHUB_OUTPUT

      - name: Upload coverage results (to Codecov.io)
        uses: codecov/codecov-action@v3
        with:
          file: ${{ steps.coverage.outputs.report }}
          ## flags: IntegrationTests, UnitTests, ${{ steps.vars.outputs.CODECOV_FLAGS }}
          flags: ${{ steps.vars.outputs.CODECOV_FLAGS }}
          name: codecov-umbrella
          fail_ci_if_error: false

  release:
    name: release
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Get artifacts
        uses: actions/download-artifact@v3

      - name: Create release assets
        run: |
          for d in sccache-*; do
            chmod +x "$d/sccache"*
            cp README.md LICENSE "$d/"
            tar -zcvf "$d.tar.gz" "$d"
            echo -n "$(shasum -ba 256 "$d.tar.gz" | cut -d " " -f 1)" > "$d.tar.gz.sha256"
            if [[ $d =~ (sccache-)(.*)?(x86_64-pc-windows)(.*)? ]]; then
              zip -r "$d.zip" "$d"
              echo -n "$(shasum -ba 256 "$d.zip" | cut -d " " -f 1)" > "$d.zip.sha256"
            fi
          done

      - name: Create release
        run: |
          tag_name=${GITHUB_REF#refs/tags/}
          for f in sccache-*.tar.gz* sccache-*.zip*; do
              if [[ -f "$f" ]]; then
                files="$files -a $f";
              fi
          done
          hub release create -m $tag_name $tag_name $files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test_freebsd:
    name: Tests/FreeBSD test suite
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-12, features: "dist-client,dist-server" }
        release: [ "13.1" ]
    steps:
    - uses: actions/checkout@v3
    - name: Prepare, build and test
      uses: vmactions/freebsd-vm@v0
      with:
        mem: 8192
        usesh: true
        prepare: pkg install -y curl gmake gtar pot
        run: |
          #####################################################################################
          ###  Prepare, build, and test
          #####################################################################################
          ###  based on ref: <https://github.com/rust-lang/rustup/pull/2783>
          ###  and on ref: <https://github.com/uutils/coreutils/commit/86c610a84b8b6c>
          ###  * NOTE: All steps need to be run in this block, otherwise, we are operating back
          ###    on the mac host.
          set -exo pipefail
          #
          ### Basic user setup ################################################################
          TEST_USER=tester
          TEST_USER_HOME="/opt/$TEST_USER"
          REPO_NAME=${GITHUB_WORKSPACE##*/}
          WORKSPACE_PARENT="/Users/runner/work/${REPO_NAME}"
          WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"
          OS_VERSION="$(freebsd-version | awk -F- '{print $1}')"
          PUB_INTF="$(netstat -4rn | grep default | awk '{ print $4}')"
          ifconfig
          #
          mkdir -p "$TEST_USER_HOME"
          pw adduser -n "$TEST_USER" -d "$TEST_USER_HOME" -c "Tester" -h -
          chown -R "$TEST_USER":"$TEST_USER" "$TEST_USER_HOME"
          chown -R "$TEST_USER":"$TEST_USER" "/$WORKSPACE_PARENT"/
          whoami
          #
          ### Install rust stable from rustup  ################################################
          su "$TEST_USER" -c "/bin/sh -exo pipefail" <<"EOH"
          whoami
          echo "$HOME"
          fetch -o /tmp/rustup.sh https://sh.rustup.rs
          sh /tmp/rustup.sh -y --profile=minimal
          . "$HOME/.cargo/env"
          #
          ### Output some information about the environment  ##################################
          # environment
          echo "## environment"
          env | sort
          # tooling info
          echo "## tooling info"
          cargo -V
          rustc -V
          echo "## installed packages"
          pkg info
          #
          ### Build project and run unit tests ################################################
          cd "$WORKSPACE"
          FAULT=0
          export RUSTFLAGS="-C debuginfo=0"
          cargo build --features "${{ matrix.job.features }}" || FAULT=1
          cargo test --features "${{ matrix.job.features }}" || FAULT=1
          unset RUSTFLAGS
          if [ "$FAULT" -eq 0 ]; then
            # save build time by avoiding "cargo install"
            cp -a target/debug/sccache target/debug/sccache-dist "$HOME/.cargo/bin/."
          fi
          # Clean to avoid to rsync back the files
          cargo clean
          if [ $FAULT -ne 0 ]; then exit 1; fi
          #
          ### Prepare sccache-dist tests ######################################################
          echo "Prepare sccache-dist tests"
          #
          SECRET_KEY="$(sccache-dist auth generate-jwt-hs256-key)"
          CLIENT_AUTH_KEY="$(sccache-dist auth generate-jwt-hs256-key)"
          #
          # create scheduler.conf
          cat >/tmp/scheduler.conf <<EOF
          public_addr = "127.0.0.1:10600"
          [client_auth]
          type = "token"
          token = "$CLIENT_AUTH_KEY"
          [server_auth]
          type = "jwt_hs256"
          secret_key = "$SECRET_KEY"
          EOF
          #
          SERVER_TOKEN="$(sccache-dist auth generate-jwt-hs256-server-token \
            --config=/tmp/scheduler.conf \
            --server="127.0.0.1:10501")"
          #
          # Create server.conf
          cat >/tmp/server.conf <<EOF
          cache_dir = "/tmp/toolchains"
          public_addr = "127.0.0.1:10501"
          scheduler_url = "http://127.0.0.1:10600"
          [builder]
          type = "pot"
          [scheduler_auth]
          type = "jwt_token"
          token = "$SERVER_TOKEN"
          EOF
          #
          # create sccache client config
          TC="$(rustup toolchain list | grep default | awk '{ print $1 }')"
          RUSTC_PATH="$HOME/.rustup/toolchains/$TC/bin/rustc"
          mkdir -p "$HOME/.config/sccache"
          cat >"$HOME/.config/sccache/config" <<EOF
          [dist]
          scheduler_url = "http://127.0.0.1:10600"
          toolchain_cache_size = 5368709120
          cache_dir = "$HOME/.cache/sccache-dist-client"
          [dist.auth]
          type = "token"
          token = "$CLIENT_AUTH_KEY"
          [[dist.toolchains]]
          type = "path_override"
          compiler_executable = "/usr/bin/cc"
          archive = "$HOME/.config/sccache/empty.tar.gz"
          archive_compiler_executable = "/usr/bin/cc"
          [[dist.toolchains]]
          type = "path_override"
          compiler_executable = "$RUSTC_PATH"
          archive = "$HOME/.config/sccache/rust-toolchain.tgz"
          archive_compiler_executable = "$RUSTC_PATH"
          EOF
          #
          echo "Creating toolchain tarballs"
          gtar cvf - --files-from /dev/null | gzip -n >"$HOME/.config/sccache/empty.tar.gz"
          gtar cf - --sort=name --mtime='2022-06-28 17:35Z' "$HOME/.rustup"  | \
            gzip -n >"$HOME/.config/sccache/rust-toolchain.tgz"
          #
          echo "Starting scheduler"
          #
          sccache-dist scheduler --config /tmp/scheduler.conf
          EOH
          #
          whoami
          #
          ### Create ZFS pool and configure pot ###############################################
          dd if=/dev/zero of=/zfs1 bs=1 count=1 seek=2G
          zdev=$(mdconfig -a -t vnode -S 4096 -f /zfs1)
          zpool create -f potpool "$zdev"
          sysrc -f /usr/local/etc/pot/pot.conf POT_ZFS_ROOT=potpool/pot
          sysrc -f /usr/local/etc/pot/pot.conf POT_EXTIF="$PUB_INTF"
          pot init
          pot create -p sccache-template -N alias -i "lo0|127.0.0.2" -t single -b "$OS_VERSION"
          pot set-cmd -p sccache-template -c /usr/bin/true
          pot set-attr -p sccache-template -A no-rc-script -V YES
          pot snapshot -p sccache-template
          #
          echo "Starting build-server (as root)"
          SCCACHE_DIST_LOG=debug RUST_LOG=info \
            $TEST_USER_HOME/.cargo/bin/sccache-dist server --config /tmp/server.conf &
          BUILD_SERVER_PID=$!
          #
          su "$TEST_USER" -c "/bin/sh -exo pipefail" <<"EOH"
          whoami
          . "$HOME/.cargo/env"
          cd "$HOME"
          #
          echo "Wait for build server to become available"
          count=0
          while [ "$(sockstat -q4l -p 10501 | wc -l | xargs)" -eq "0" ]; do
            count=$(( count + 1 ))
            if [ $count -gt 60 ]; then
               2>&1 echo "Build server did not become available"
               exit 1
            fi
            sleep 5
          done
          #
          ### Create test project to test sccache-dist with ###################################
          cargo init buildtest
          cd buildtest
          echo 'chrono = "0.4"' >>Cargo.toml
          #
          ### Start sccache server ############################################################
          SCCACHE_ERROR_LOG=/tmp/sccache_log.txt SCCACHE_LOG=info RUST_LOG=info \
            sccache --start-server
          sleep 10
          #
          ### First build with sccache-dist ###################################################
          RUSTC_WRAPPER=sccache cargo build
          STATS="$(sccache -s)"
          echo "Statistics of first buildtest"
          echo "$STATS"
          CACHE_HITS="$(echo "$STATS" | grep "Cache hits" | grep -v Rust | awk '{ print $3 }')"
          FAILED_DIST="$(echo "$STATS" | grep "Failed distributed compilations" | awk '{ print $4 }')"
          SUCCEEDED_DIST="$(echo "$STATS" | (grep -F "127.0.0.1:10501" || true) | awk '{ print $2 }')"
          #
          if [ "$CACHE_HITS" -ne 0 ]; then
            2>&1 echo "Unexpected cache hits"
            exit 1
          fi
          if [ "$FAILED_DIST" -ne 0 ]; then
            2>&1 echo "Some distributed compilations failed"
            exit 1
          fi
          if [ "$SUCCEEDED_DIST" -eq 0 ]; then
            2>&1 echo "No distributed compilations succeeded"
            exit 1
          fi
          #
          ### Second build with sccache-dist ##################################################
          sccache -z
          cargo clean
          RUSTC_WRAPPER=sccache cargo build
          STATS="$(sccache -s)"
          echo "Statistics of second buildtest"
          echo "$STATS"
          CACHE_HITS="$(echo "$STATS" | grep "Cache hits" | grep -v Rust | awk '{ print $3 }')"
          FAILED_DIST="$(echo "$STATS" | grep "Failed distributed compilations" | awk '{ print $4 }')"
          SUCCEEDED_DIST="$(echo "$STATS" | (grep -F "127.0.0.1:10501" || true) | awk '{ print $2 }')"
          #
          if [ "$CACHE_HITS" -eq 0 ]; then
            2>&1 echo "No cache hits when there should be some"
            exit 1
          fi
          if [ "$FAILED_DIST" -ne 0 ]; then
            2>&1 echo "Some distributed compilations failed"
            exit 1
          fi
          if [ "$SUCCEEDED_DIST" -ne 0 ]; then
            2>&1 echo "Unexpected distributed compilations happened"
            exit 1
          fi
          #
          ### Test user cleanup ###############################################################
          sccache --stop-server
          killall sccache-dist || true
          EOH
          #
          ### root user cleanup################################################################
          killall sccache-dist || true
          wait $BUILD_SERVER_PID || true
          #
          ### Finished ########################################################################
          echo "Done"
